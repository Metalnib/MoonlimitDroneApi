


// —————————————— 
// <auto-generated> 
//	This code was auto-generated 01/03/2021 11:18:00
//	T4 template generates test code 
//	NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution.
// <auto-generated> 
// —————————————–
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Moonlimit.DroneAPI.Api;
using Moonlimit.DroneAPI.Domain;
using IdentityModel.Client;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.TestHost;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Xunit;
using static JWT.Controllers.TokenController;

namespace Moonlimit.DroneAPI.Test
{
	#region unit tests
	#region ObjectDetection tests

    /// <summary>
    ///
    /// ObjectDetection API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class ObjectDetectionTest: BaseTest
    {
        public HttpClientFixture fixture;
        public ObjectDetectionTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedObjectDetection { get; set; }

        #region ObjectDetection tests

        [Fact]
        public async Task objectdetection_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var objectdetectionid = await util.addObjectDetection(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/objectdetection");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/objectdetection/" + objectdetectionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<ObjectDetectionViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeObjectDetection(httpclient, objectdetectionid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task objectdetection_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            ObjectDetectionViewModel objectdetection = new ObjectDetectionViewModel
            {
			//MANUAL UPDATES REQUIRED!
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/objectdetection", new StringContent(
                                                               JsonConvert.SerializeObject(objectdetection), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetObjectDetection(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/objectdetection/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/objectdetection/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/objectdetection/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/objectdetection/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task objectdetection_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var objectdetectionid = await util.addObjectDetection(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/objectdetection/" + objectdetectionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<ObjectDetectionViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeObjectDetection(httpclient, objectdetectionid);
	    //remove if any parent entity added 
        }

        #endregion

        #region ObjectDetection async tests

        [Fact]
        public async Task objectdetection_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var objectdetectionid = await util.addObjectDetection(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/objectdetectionasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/objectdetectionasync/" + objectdetectionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<ObjectDetectionViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeObjectDetection(httpclient, objectdetectionid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task objectdetection_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            ObjectDetectionViewModel objectdetection = new ObjectDetectionViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/objectdetectionasync", new StringContent(
                                                               JsonConvert.SerializeObject(objectdetection), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetObjectDetection(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/objectdetectionasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/objectdetectionasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/objectdetectionasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/objectdetectionasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task objectdetection_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var objectdetectionid = await util.addObjectDetection(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/objectdetectionasync/" + objectdetectionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<ObjectDetectionViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeObjectDetection(httpclient, objectdetectionid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region PlannedRoute tests

    /// <summary>
    ///
    /// PlannedRoute API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class PlannedRouteTest: BaseTest
    {
        public HttpClientFixture fixture;
        public PlannedRouteTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedPlannedRoute { get; set; }

        #region PlannedRoute tests

        [Fact]
        public async Task plannedroute_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var plannedrouteid = await util.addPlannedRoute(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/plannedroute");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/plannedroute/" + plannedrouteid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<PlannedRouteViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removePlannedRoute(httpclient, plannedrouteid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task plannedroute_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            PlannedRouteViewModel plannedroute = new PlannedRouteViewModel
            {
			//MANUAL UPDATES REQUIRED!
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/plannedroute", new StringContent(
                                                               JsonConvert.SerializeObject(plannedroute), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetPlannedRoute(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/plannedroute/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/plannedroute/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/plannedroute/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/plannedroute/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task plannedroute_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var plannedrouteid = await util.addPlannedRoute(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/plannedroute/" + plannedrouteid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<PlannedRouteViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removePlannedRoute(httpclient, plannedrouteid);
	    //remove if any parent entity added 
        }

        #endregion

        #region PlannedRoute async tests

        [Fact]
        public async Task plannedroute_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var plannedrouteid = await util.addPlannedRoute(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/plannedrouteasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/plannedrouteasync/" + plannedrouteid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<PlannedRouteViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removePlannedRoute(httpclient, plannedrouteid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task plannedroute_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            PlannedRouteViewModel plannedroute = new PlannedRouteViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/plannedrouteasync", new StringContent(
                                                               JsonConvert.SerializeObject(plannedroute), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetPlannedRoute(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/plannedrouteasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/plannedrouteasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/plannedrouteasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/plannedrouteasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task plannedroute_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var plannedrouteid = await util.addPlannedRoute(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/plannedrouteasync/" + plannedrouteid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<PlannedRouteViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removePlannedRoute(httpclient, plannedrouteid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region StatusReport tests

    /// <summary>
    ///
    /// StatusReport API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class StatusReportTest: BaseTest
    {
        public HttpClientFixture fixture;
        public StatusReportTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedStatusReport { get; set; }

        #region StatusReport tests

        [Fact]
        public async Task statusreport_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var statusreportid = await util.addStatusReport(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/statusreport");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/statusreport/" + statusreportid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<StatusReportViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeStatusReport(httpclient, statusreportid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task statusreport_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            StatusReportViewModel statusreport = new StatusReportViewModel
            {
			//MANUAL UPDATES REQUIRED!
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/statusreport", new StringContent(
                                                               JsonConvert.SerializeObject(statusreport), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetStatusReport(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/statusreport/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/statusreport/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/statusreport/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/statusreport/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task statusreport_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var statusreportid = await util.addStatusReport(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/statusreport/" + statusreportid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<StatusReportViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeStatusReport(httpclient, statusreportid);
	    //remove if any parent entity added 
        }

        #endregion

        #region StatusReport async tests

        [Fact]
        public async Task statusreport_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var statusreportid = await util.addStatusReport(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/statusreportasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/statusreportasync/" + statusreportid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<StatusReportViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeStatusReport(httpclient, statusreportid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task statusreport_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            StatusReportViewModel statusreport = new StatusReportViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/statusreportasync", new StringContent(
                                                               JsonConvert.SerializeObject(statusreport), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetStatusReport(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/statusreportasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/statusreportasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/statusreportasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/statusreportasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task statusreport_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var statusreportid = await util.addStatusReport(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/statusreportasync/" + statusreportid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<StatusReportViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeStatusReport(httpclient, statusreportid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region CompanyAccount tests

    /// <summary>
    ///
    /// CompanyAccount API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class CompanyAccountTest: BaseTest
    {
        public HttpClientFixture fixture;
        public CompanyAccountTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedCompanyAccount { get; set; }

	}
        #endregion
	#region DroneCommands tests

    /// <summary>
    ///
    /// DroneCommands API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class DroneCommandsTest: BaseTest
    {
        public HttpClientFixture fixture;
        public DroneCommandsTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedDroneCommands { get; set; }

        #region DroneCommands tests

        [Fact]
        public async Task dronecommands_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var dronecommandsid = await util.addDroneCommands(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/dronecommands");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/dronecommands/" + dronecommandsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneCommandsViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeDroneCommands(httpclient, dronecommandsid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task dronecommands_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            DroneCommandsViewModel dronecommands = new DroneCommandsViewModel
            {
			//MANUAL UPDATES REQUIRED!
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/dronecommands", new StringContent(
                                                               JsonConvert.SerializeObject(dronecommands), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetDroneCommands(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/dronecommands/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/dronecommands/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/dronecommands/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/dronecommands/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task dronecommands_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var dronecommandsid = await util.addDroneCommands(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/dronecommands/" + dronecommandsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneCommandsViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeDroneCommands(httpclient, dronecommandsid);
	    //remove if any parent entity added 
        }

        #endregion

        #region DroneCommands async tests

        [Fact]
        public async Task dronecommands_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var dronecommandsid = await util.addDroneCommands(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/dronecommandsasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/dronecommandsasync/" + dronecommandsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneCommandsViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeDroneCommands(httpclient, dronecommandsid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task dronecommands_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            DroneCommandsViewModel dronecommands = new DroneCommandsViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/dronecommandsasync", new StringContent(
                                                               JsonConvert.SerializeObject(dronecommands), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetDroneCommands(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/dronecommandsasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/dronecommandsasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/dronecommandsasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/dronecommandsasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task dronecommands_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var dronecommandsid = await util.addDroneCommands(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/dronecommandsasync/" + dronecommandsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneCommandsViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeDroneCommands(httpclient, dronecommandsid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region DroneNetworkSettings tests

    /// <summary>
    ///
    /// DroneNetworkSettings API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class DroneNetworkSettingsTest: BaseTest
    {
        public HttpClientFixture fixture;
        public DroneNetworkSettingsTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedDroneNetworkSettings { get; set; }

        #region DroneNetworkSettings tests

        [Fact]
        public async Task dronenetworksettings_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var dronenetworksettingsid = await util.addDroneNetworkSettings(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/dronenetworksettings");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/dronenetworksettings/" + dronenetworksettingsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneNetworkSettingsViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeDroneNetworkSettings(httpclient, dronenetworksettingsid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task dronenetworksettings_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            DroneNetworkSettingsViewModel dronenetworksettings = new DroneNetworkSettingsViewModel
            {
			//MANUAL UPDATES REQUIRED!
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/dronenetworksettings", new StringContent(
                                                               JsonConvert.SerializeObject(dronenetworksettings), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetDroneNetworkSettings(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/dronenetworksettings/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/dronenetworksettings/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/dronenetworksettings/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/dronenetworksettings/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task dronenetworksettings_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var dronenetworksettingsid = await util.addDroneNetworkSettings(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/dronenetworksettings/" + dronenetworksettingsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneNetworkSettingsViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeDroneNetworkSettings(httpclient, dronenetworksettingsid);
	    //remove if any parent entity added 
        }

        #endregion

        #region DroneNetworkSettings async tests

        [Fact]
        public async Task dronenetworksettings_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var dronenetworksettingsid = await util.addDroneNetworkSettings(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/dronenetworksettingsasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/dronenetworksettingsasync/" + dronenetworksettingsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneNetworkSettingsViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeDroneNetworkSettings(httpclient, dronenetworksettingsid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task dronenetworksettings_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            DroneNetworkSettingsViewModel dronenetworksettings = new DroneNetworkSettingsViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/dronenetworksettingsasync", new StringContent(
                                                               JsonConvert.SerializeObject(dronenetworksettings), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetDroneNetworkSettings(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/dronenetworksettingsasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/dronenetworksettingsasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/dronenetworksettingsasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/dronenetworksettingsasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task dronenetworksettings_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var dronenetworksettingsid = await util.addDroneNetworkSettings(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/dronenetworksettingsasync/" + dronenetworksettingsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneNetworkSettingsViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeDroneNetworkSettings(httpclient, dronenetworksettingsid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region DroneOnvifSettings tests

    /// <summary>
    ///
    /// DroneOnvifSettings API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class DroneOnvifSettingsTest: BaseTest
    {
        public HttpClientFixture fixture;
        public DroneOnvifSettingsTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedDroneOnvifSettings { get; set; }

        #region DroneOnvifSettings tests

        [Fact]
        public async Task droneonvifsettings_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var droneonvifsettingsid = await util.addDroneOnvifSettings(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/droneonvifsettings");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/droneonvifsettings/" + droneonvifsettingsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneOnvifSettingsViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeDroneOnvifSettings(httpclient, droneonvifsettingsid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task droneonvifsettings_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            DroneOnvifSettingsViewModel droneonvifsettings = new DroneOnvifSettingsViewModel
            {
			//MANUAL UPDATES REQUIRED!
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/droneonvifsettings", new StringContent(
                                                               JsonConvert.SerializeObject(droneonvifsettings), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetDroneOnvifSettings(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/droneonvifsettings/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/droneonvifsettings/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/droneonvifsettings/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/droneonvifsettings/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task droneonvifsettings_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var droneonvifsettingsid = await util.addDroneOnvifSettings(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/droneonvifsettings/" + droneonvifsettingsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneOnvifSettingsViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeDroneOnvifSettings(httpclient, droneonvifsettingsid);
	    //remove if any parent entity added 
        }

        #endregion

        #region DroneOnvifSettings async tests

        [Fact]
        public async Task droneonvifsettings_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var droneonvifsettingsid = await util.addDroneOnvifSettings(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/droneonvifsettingsasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/droneonvifsettingsasync/" + droneonvifsettingsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneOnvifSettingsViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeDroneOnvifSettings(httpclient, droneonvifsettingsid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task droneonvifsettings_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            DroneOnvifSettingsViewModel droneonvifsettings = new DroneOnvifSettingsViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/droneonvifsettingsasync", new StringContent(
                                                               JsonConvert.SerializeObject(droneonvifsettings), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetDroneOnvifSettings(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/droneonvifsettingsasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/droneonvifsettingsasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/droneonvifsettingsasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/droneonvifsettingsasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task droneonvifsettings_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var droneonvifsettingsid = await util.addDroneOnvifSettings(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/droneonvifsettingsasync/" + droneonvifsettingsid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<DroneOnvifSettingsViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeDroneOnvifSettings(httpclient, droneonvifsettingsid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region GeoArea tests

    /// <summary>
    ///
    /// GeoArea API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class GeoAreaTest: BaseTest
    {
        public HttpClientFixture fixture;
        public GeoAreaTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedGeoArea { get; set; }

        #region GeoArea tests

        [Fact]
        public async Task geoarea_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var geoareaid = await util.addGeoArea(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/geoarea");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/geoarea/" + geoareaid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<GeoAreaViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeGeoArea(httpclient, geoareaid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task geoarea_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            GeoAreaViewModel geoarea = new GeoAreaViewModel
            {
			//MANUAL UPDATES REQUIRED!
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/geoarea", new StringContent(
                                                               JsonConvert.SerializeObject(geoarea), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetGeoArea(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/geoarea/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/geoarea/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/geoarea/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/geoarea/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task geoarea_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var geoareaid = await util.addGeoArea(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/geoarea/" + geoareaid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<GeoAreaViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeGeoArea(httpclient, geoareaid);
	    //remove if any parent entity added 
        }

        #endregion

        #region GeoArea async tests

        [Fact]
        public async Task geoarea_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var geoareaid = await util.addGeoArea(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/geoareaasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/geoareaasync/" + geoareaid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<GeoAreaViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeGeoArea(httpclient, geoareaid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task geoarea_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            GeoAreaViewModel geoarea = new GeoAreaViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/geoareaasync", new StringContent(
                                                               JsonConvert.SerializeObject(geoarea), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetGeoArea(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/geoareaasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/geoareaasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/geoareaasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/geoareaasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task geoarea_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var geoareaid = await util.addGeoArea(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/geoareaasync/" + geoareaid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<GeoAreaViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeGeoArea(httpclient, geoareaid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region GeoPoint tests

    /// <summary>
    ///
    /// GeoPoint API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class GeoPointTest: BaseTest
    {
        public HttpClientFixture fixture;
        public GeoPointTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedGeoPoint { get; set; }

        #region GeoPoint tests

        [Fact]
        public async Task geopoint_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var geopointid = await util.addGeoPoint(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/geopoint");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/geopoint/" + geopointid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<GeoPointViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeGeoPoint(httpclient, geopointid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task geopoint_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            GeoPointViewModel geopoint = new GeoPointViewModel
            {
			//MANUAL UPDATES REQUIRED!
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/geopoint", new StringContent(
                                                               JsonConvert.SerializeObject(geopoint), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetGeoPoint(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/geopoint/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/geopoint/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/geopoint/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/geopoint/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task geopoint_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var geopointid = await util.addGeoPoint(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/geopoint/" + geopointid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<GeoPointViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeGeoPoint(httpclient, geopointid);
	    //remove if any parent entity added 
        }

        #endregion

        #region GeoPoint async tests

        [Fact]
        public async Task geopoint_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var geopointid = await util.addGeoPoint(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/geopointasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/geopointasync/" + geopointid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<GeoPointViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeGeoPoint(httpclient, geopointid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task geopoint_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            GeoPointViewModel geopoint = new GeoPointViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/geopointasync", new StringContent(
                                                               JsonConvert.SerializeObject(geopoint), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetGeoPoint(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/geopointasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/geopointasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/geopointasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/geopointasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task geopoint_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var geopointid = await util.addGeoPoint(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/geopointasync/" + geopointid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<GeoPointViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeGeoPoint(httpclient, geopointid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region Mission tests

    /// <summary>
    ///
    /// Mission API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class MissionTest: BaseTest
    {
        public HttpClientFixture fixture;
        public MissionTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedMission { get; set; }

        #region Mission tests

        [Fact]
        public async Task mission_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var missionid = await util.addMission(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/mission");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/mission/" + missionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<MissionViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeMission(httpclient, missionid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task mission_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            MissionViewModel mission = new MissionViewModel
            {
			//MANUAL UPDATES REQUIRED!
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/mission", new StringContent(
                                                               JsonConvert.SerializeObject(mission), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetMission(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/mission/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/mission/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/mission/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/mission/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task mission_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var missionid = await util.addMission(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/mission/" + missionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<MissionViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeMission(httpclient, missionid);
	    //remove if any parent entity added 
        }

        #endregion

        #region Mission async tests

        [Fact]
        public async Task mission_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var missionid = await util.addMission(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/missionasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/missionasync/" + missionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<MissionViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removeMission(httpclient, missionid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task mission_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            MissionViewModel mission = new MissionViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/missionasync", new StringContent(
                                                               JsonConvert.SerializeObject(mission), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetMission(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/missionasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/missionasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/missionasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/missionasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task mission_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var missionid = await util.addMission(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/missionasync/" + missionid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<MissionViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removeMission(httpclient, missionid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion
	#region PatrolConfig tests

    /// <summary>
    ///
    /// PatrolConfig API Integration tests
    ///
    /// MANUAL UPDATES REQUIRED!
    ///
    /// NOTE: In order to run an pass these scaffolded tests they have to be manually adjusted 
    ///       according to new entity class properties - search for MANUAL UPDATES REQUIRED!
    ///
    /// </summary>
    [Collection("HttpClient collection")]
    public class PatrolConfigTest: BaseTest
    {
        public HttpClientFixture fixture;
        public PatrolConfigTest(HttpClientFixture fixture)
        {
            this.fixture = fixture;
            var client = fixture.Client;
        }

        public static string LastAddedPatrolConfig { get; set; }

        #region PatrolConfig tests

        [Fact]
        public async Task patrolconfig_getall()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
                        //MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var patrolconfigid = await util.addPatrolConfig(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/patrolconfig");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/patrolconfig/" + patrolconfigid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<PatrolConfigViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removePatrolConfig(httpclient, patrolconfigid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task patrolconfig_add_update_delete()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            PatrolConfigViewModel patrolconfig = new PatrolConfigViewModel
            {
			//MANUAL UPDATES REQUIRED!
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/patrolconfig", new StringContent(
                                                               JsonConvert.SerializeObject(patrolconfig), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetPatrolConfig(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/patrolconfig/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/patrolconfig/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/patrolconfig/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/patrolconfig/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        [Fact]
        public async Task patrolconfig_getbyid()
        {
			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
	                //MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var patrolconfigid = await util.addPatrolConfig(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/patrolconfig/" + patrolconfigid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<PatrolConfigViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removePatrolConfig(httpclient, patrolconfigid);
	    //remove if any parent entity added 
        }

        #endregion

        #region PatrolConfig async tests

        [Fact]
        public async Task patrolconfig_getallasync()
        {
            var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add parent of the entity if exist
			//add entity
            var patrolconfigid = await util.addPatrolConfig(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/patrolconfigasync");
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenititys = (ICollection<UserViewModel>)JsonConvert.DeserializeObject<IEnumerable<UserViewModel>>(jsonString);
            Assert.True(vmenititys.Count > 0);
            // lazy-loading test if entity has children
            response = await httpclient.GetAsync("/api/patrolconfigasync/" + patrolconfigid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<PatrolConfigViewModel>(jsonString);
            //Assert.True(vmenitity.Kids.Count == 1);
            //clean
            await util.removePatrolConfig(httpclient, patrolconfigid);
			//remove if any parent entity added 
        }


        [Fact]
        public async Task patrolconfig_add_update_delete_async()
        {
            var httpclient = fixture.Client;;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            PatrolConfigViewModel patrolconfig = new PatrolConfigViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.PostAsync("/api/patrolconfigasync", new StringContent(
                                                               JsonConvert.SerializeObject(patrolconfig), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Created, response.StatusCode);
            var lastAddedId = await response.Content.ReadAsStringAsync();
            Assert.True(int.Parse(lastAddedId) > 1);
            int id = 0; int.TryParse(lastAddedId, out id);

            //get inserted
            var util = new UtilityExt();
            var vmentity = await util.GetPatrolConfig(httpclient, id);

            //update test
            vmentity.TestText = "tt updated";
            response = await httpclient.PutAsync("/api/patrolconfigasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            //confirm update
            response = await httpclient.GetAsync("/api/patrolconfigasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var oj = JObject.Parse(jsonString);
            var tt = oj["testText"].ToString();
            Assert.Equal(tt, vmentity.TestText);

            //another update with same account - concurrency
            vmentity.TestText = "tt updated 2";
            response = await httpclient.PutAsync("/api/patrolconfigasync/" + id.ToString(), new StringContent(JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            Assert.Equal(HttpStatusCode.PreconditionFailed, response.StatusCode);

            //delete test 
            response = await httpclient.DeleteAsync("/api/patrolconfigasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);

        }

        [Fact]
        public async Task patrolconfig_getbyidasync()
        {

			var httpclient = fixture.Client;
            if (String.IsNullOrEmpty(TokenTest.TokenValue)) await TokenTest.token_get(httpclient);
            //
            var util = new UtilityExt();
			//MANUAL UPDATES REQUIRED!
			//todo - add if any parent of the entity
			//add entity
            var patrolconfigid = await util.addPatrolConfig(httpclient);
            //
            httpclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await httpclient.GetAsync("/api/patrolconfigasync/" + patrolconfigid.ToString());
            response.EnsureSuccessStatusCode();
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmenitity = JsonConvert.DeserializeObject<PatrolConfigViewModel>(jsonString);
            Assert.True(vmenitity.TestText == "tt updated");
			
            //clean
            await util.removePatrolConfig(httpclient, patrolconfigid);
	    //remove if any parent entity added 
        }

        #endregion
	}
        #endregion

    #endregion

    #region Shared test

    public partial class UtilityExt
    {

        public async Task<int> addObjectDetection(HttpClient client)
        {
		    
            ObjectDetectionViewModel vmentity = new ObjectDetectionViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/objectdetection", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<ObjectDetectionViewModel> GetObjectDetection(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/objectdetectionasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<ObjectDetectionViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeObjectDetection(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/objectdetection/" + id.ToString());
        }


        public async Task<int> addPlannedRoute(HttpClient client)
        {
		    
            PlannedRouteViewModel vmentity = new PlannedRouteViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/plannedroute", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<PlannedRouteViewModel> GetPlannedRoute(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/plannedrouteasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<PlannedRouteViewModel>(jsonString);
            return vmentity;
        }
        public async Task removePlannedRoute(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/plannedroute/" + id.ToString());
        }


        public async Task<int> addStatusReport(HttpClient client)
        {
		    
            StatusReportViewModel vmentity = new StatusReportViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/statusreport", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<StatusReportViewModel> GetStatusReport(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/statusreportasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<StatusReportViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeStatusReport(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/statusreport/" + id.ToString());
        }


        public async Task<int> addCompanyAccount(HttpClient client)
        {
		    
            CompanyAccountViewModel vmentity = new CompanyAccountViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/companyaccount", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<CompanyAccountViewModel> GetCompanyAccount(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/companyaccountasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<CompanyAccountViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeCompanyAccount(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/companyaccount/" + id.ToString());
        }

        public async Task<int> addDroneCommands(HttpClient client)
        {
		    
            DroneCommandsViewModel vmentity = new DroneCommandsViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/dronecommands", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<DroneCommandsViewModel> GetDroneCommands(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/dronecommandsasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<DroneCommandsViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeDroneCommands(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/dronecommands/" + id.ToString());
        }


        public async Task<int> addDroneNetworkSettings(HttpClient client)
        {
		    
            DroneNetworkSettingsViewModel vmentity = new DroneNetworkSettingsViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/dronenetworksettings", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<DroneNetworkSettingsViewModel> GetDroneNetworkSettings(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/dronenetworksettingsasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<DroneNetworkSettingsViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeDroneNetworkSettings(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/dronenetworksettings/" + id.ToString());
        }


        public async Task<int> addDroneOnvifSettings(HttpClient client)
        {
		    
            DroneOnvifSettingsViewModel vmentity = new DroneOnvifSettingsViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/droneonvifsettings", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<DroneOnvifSettingsViewModel> GetDroneOnvifSettings(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/droneonvifsettingsasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<DroneOnvifSettingsViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeDroneOnvifSettings(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/droneonvifsettings/" + id.ToString());
        }


        public async Task<int> addGeoArea(HttpClient client)
        {
		    
            GeoAreaViewModel vmentity = new GeoAreaViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/geoarea", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<GeoAreaViewModel> GetGeoArea(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/geoareaasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<GeoAreaViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeGeoArea(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/geoarea/" + id.ToString());
        }


        public async Task<int> addGeoPoint(HttpClient client)
        {
		    
            GeoPointViewModel vmentity = new GeoPointViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/geopoint", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<GeoPointViewModel> GetGeoPoint(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/geopointasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<GeoPointViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeGeoPoint(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/geopoint/" + id.ToString());
        }


        public async Task<int> addMission(HttpClient client)
        {
		    
            MissionViewModel vmentity = new MissionViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/mission", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<MissionViewModel> GetMission(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/missionasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<MissionViewModel>(jsonString);
            return vmentity;
        }
        public async Task removeMission(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/mission/" + id.ToString());
        }


        public async Task<int> addPatrolConfig(HttpClient client)
        {
		    
            PatrolConfigViewModel vmentity = new PatrolConfigViewModel
            {
			//MANUAL UPDATES REQUIRED!
			//initiate viewmodel object
			TestText = "tt updated"
            };

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.PostAsync("/api/patrolconfig", new StringContent(
                                                               JsonConvert.SerializeObject(vmentity), Encoding.UTF8, "application/json"));
            var jsonString = await response.Content.ReadAsStringAsync();
            int lastAdded = 0;
            int.TryParse(jsonString, out lastAdded);
            return lastAdded;
        }
        public async Task<PatrolConfigViewModel> GetPatrolConfig(HttpClient client, int id)
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", TokenTest.TokenValue);
            var response = await client.GetAsync("/api/patrolconfigasync/" + id.ToString());
            response.EnsureSuccessStatusCode();
            var jsonString = await response.Content.ReadAsStringAsync();
            var vmentity = JsonConvert.DeserializeObject<PatrolConfigViewModel>(jsonString);
            return vmentity;
        }
        public async Task removePatrolConfig(HttpClient client, int id)
        {
            await client.DeleteAsync("/api/patrolconfig/" + id.ToString());
        }

	}
	 #endregion
}

