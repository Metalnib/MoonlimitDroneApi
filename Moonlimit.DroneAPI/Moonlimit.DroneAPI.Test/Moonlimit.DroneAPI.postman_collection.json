{
	"info": {
		"_postman_id": "e9219cc7-46af-477d-8dc9-5a835ca1ffc7",
		"name": "Moonlimit.DroneAPI",
		"description": "This is selection of basic REST API tests for Moonlimit.DroneAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "JWT",
			"item": [
				{
					"name": "Account",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"account_addedid\");  ",
											"postman.setGlobalVariable(\"account_addedid\", responseBody); ",
											"pm.globals.set(\"account_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Brad Pitt\",\n    \"email\": \"bradpitt@me.net\",\n    \"description\":\"description\",\n    \"isTrial\": true,\n    \"IsActive\": true,\n    \"SetActive\": \"2018-12-01\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/account",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"accountasync_addedid\");  ",
											"postman.setGlobalVariable(\"accountasync_addedid\", responseBody); ",
											"pm.globals.set(\"accountasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Brad Pitt\",\n    \"email\": \"bradpitt@me.net\",\n    \"description\":\"description\",\n    \"isTrial\": true,\n    \"IsActive\": true,\n    \"SetActive\": \"2018-12-01\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"accountasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/account",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"accountasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"account_addedrowversion\");  ",
											"postman.setGlobalVariable(\"account_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"account_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify account returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/account/{{account_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"account",
										"{{account_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"accountasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"accountasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"accountasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify account returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync/{{accountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"accountasync",
										"{{accountasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{account_addedid}},\n        \"name\": \"Brad Pitt - update3\",\n        \"email\": \"email3@anasoft.net\",\n        \"description\": \"updated\",\n        \"isTrial\": true,\n        \"isActive\": true,\n        \"setActive\": \"2018-12-01T00:00:00\",\n        \"rowVersion\":\"{{account_addedrowversion}}\",\n        \"testText\": null\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/account/{{account_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"account",
										"{{account_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify account updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{accountasync_addedid}},\n        \"name\": \"Brad Pitt - update3\",\n        \"email\": \"email3@anasoft.net\",\n        \"description\": \"updated\",\n        \"isTrial\": true,\n        \"isActive\": true,\n        \"setActive\": \"2018-12-01T00:00:00\",\n        \"rowVersion\":\"{{accountasync_addedrowversion}}\",\n        \"testText\": null\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync/{{accountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"accountasync",
										"{{accountasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/account/{{account_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"account",
										"{{account_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/accountasync/{{accountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"accountasync",
										"{{accountasync_addedid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"user_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"user_addedid\", responseBody); ",
											"pm.globals.set(\"user_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"FirstName\": \"Chuck Norris\",\n    \"LastName\": \"Chuck Norris\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"Chuck_Norris@me.com\",\n    \"Description\": \"description\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"CompanyAccountId\": 1\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/user",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.clearGlobalVariable(\"userasync_addedid\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"userasync_addedid\", responseBody); ",
											"pm.globals.set(\"userasync_addedid\", responseBody);",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"FirstName\": \"Chuck Norris\",\n    \"LastName\": \"Chuck Norris\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"Chuck_Norris@me.com\",\n    \"Description\": \"description\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"CompanyAccountId\": 1\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"userasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/user",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"userasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"user_addedrowversion\");  ",
											"postman.setGlobalVariable(\"user_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"user_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify user returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/user/{{user_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"user",
										"{{user_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"userasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"userasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"userasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify user returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync/{{userasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"userasync",
										"{{userasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify user updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\":{{user_addedid}},\n    \"FirstName\": \"Brad\",\n    \"LastName\": \"Pitt\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"bradpitt@anasoft.net\",\n    \"Description\": \"updated\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"AccountId\": 1,\n    \"rowVersion\": \"{{user_addedrowversion}}\",\n    \"testText\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/user/{{user_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"user",
										"{{user_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify user updated\",  () => {",
											"   pm.expect(pm.response.json().description).to.be.equal(\"updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\":{{userasync_addedid}},\n    \"FirstName\": \"Brad\",\n    \"LastName\": \"Pitt\",\n    \"UserName\": \"my1@email.com\",\n    \"Email\":\"bradpitt@anasoft.net\",\n    \"Description\": \"updated\",\n    \"IsAdminRole\": true,\n    \"IsActive\": true,\n    \"Password\": \"mysecretpassword123\",\n    \"AccountId\": 1,\n    \"rowVersion\": \"{{userasync_addedrowversion}}\",\n    \"testText\": null\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync/{{userasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"userasync",
										"{{userasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/user/{{user_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"user",
										"{{user_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/userasync/{{userasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"userasync",
										"{{userasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ObjectDetection",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"objectdetection_addedid\");  ",
											"postman.setGlobalVariable(\"objectdetection_addedid\", responseBody); ",
											"pm.globals.set(\"objectdetection_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/objectdetection",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"objectdetection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"objectdetectionasync_addedid\");  ",
											"postman.setGlobalVariable(\"objectdetectionasync_addedid\", responseBody); ",
											"pm.globals.set(\"objectdetectionasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/objectdetectionasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"objectdetectionasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/objectdetection",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"objectdetection"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify objectdetection counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/objectdetectionasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"objectdetectionasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"objectdetection_addedrowversion\");  ",
											"postman.setGlobalVariable(\"objectdetection_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"objectdetection_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify objectdetection returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/objectdetection/{{objectdetection_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"objectdetection",
										"{{objectdetection_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"objectdetectionasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"objectdetectionasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"objectdetectionasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify objectdetection returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/objectdetectionasync/{{objectdetectionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"objectdetectionasync",
										"{{objectdetectionasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify objectdetection updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{objectdetection_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{objectdetection_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/objectdetection/{{objectdetection_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"objectdetection",
										"{{objectdetection_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify objectdetection updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{objectdetectionasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{objectdetectionasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/objectdetectionasync/{{objectdetectionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"objectdetectionasync",
										"{{objectdetectionasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/objectdetection/{{objectdetection_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"objectdetection",
										"{{objectdetection_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/objectdetectionasync/{{objectdetectionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"objectdetectionasync",
										"{{objectdetectionasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT ObjectDetection tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PlannedRoute",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"plannedroute_addedid\");  ",
											"postman.setGlobalVariable(\"plannedroute_addedid\", responseBody); ",
											"pm.globals.set(\"plannedroute_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/plannedroute",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"plannedroute"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"plannedrouteasync_addedid\");  ",
											"postman.setGlobalVariable(\"plannedrouteasync_addedid\", responseBody); ",
											"pm.globals.set(\"plannedrouteasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/plannedrouteasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"plannedrouteasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/plannedroute",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"plannedroute"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify plannedroute counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/plannedrouteasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"plannedrouteasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"plannedroute_addedrowversion\");  ",
											"postman.setGlobalVariable(\"plannedroute_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"plannedroute_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify plannedroute returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/plannedroute/{{plannedroute_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"plannedroute",
										"{{plannedroute_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"plannedrouteasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"plannedrouteasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"plannedrouteasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify plannedroute returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/plannedrouteasync/{{plannedrouteasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"plannedrouteasync",
										"{{plannedrouteasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify plannedroute updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{plannedroute_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{plannedroute_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/plannedroute/{{plannedroute_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"plannedroute",
										"{{plannedroute_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify plannedroute updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{plannedrouteasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{plannedrouteasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/plannedrouteasync/{{plannedrouteasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"plannedrouteasync",
										"{{plannedrouteasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/plannedroute/{{plannedroute_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"plannedroute",
										"{{plannedroute_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/plannedrouteasync/{{plannedrouteasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"plannedrouteasync",
										"{{plannedrouteasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT PlannedRoute tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "StatusReport",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"statusreport_addedid\");  ",
											"postman.setGlobalVariable(\"statusreport_addedid\", responseBody); ",
											"pm.globals.set(\"statusreport_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/statusreport",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"statusreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"statusreportasync_addedid\");  ",
											"postman.setGlobalVariable(\"statusreportasync_addedid\", responseBody); ",
											"pm.globals.set(\"statusreportasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/statusreportasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"statusreportasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/statusreport",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"statusreport"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify statusreport counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/statusreportasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"statusreportasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"statusreport_addedrowversion\");  ",
											"postman.setGlobalVariable(\"statusreport_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"statusreport_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify statusreport returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/statusreport/{{statusreport_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"statusreport",
										"{{statusreport_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"statusreportasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"statusreportasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"statusreportasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify statusreport returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/statusreportasync/{{statusreportasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"statusreportasync",
										"{{statusreportasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify statusreport updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{statusreport_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{statusreport_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/statusreport/{{statusreport_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"statusreport",
										"{{statusreport_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify statusreport updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{statusreportasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{statusreportasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/statusreportasync/{{statusreportasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"statusreportasync",
										"{{statusreportasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/statusreport/{{statusreport_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"statusreport",
										"{{statusreport_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/statusreportasync/{{statusreportasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"statusreportasync",
										"{{statusreportasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT StatusReport tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "CompanyAccount",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"companyaccount_addedid\");  ",
											"postman.setGlobalVariable(\"companyaccount_addedid\", responseBody); ",
											"pm.globals.set(\"companyaccount_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/companyaccount",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"companyaccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"companyaccountasync_addedid\");  ",
											"postman.setGlobalVariable(\"companyaccountasync_addedid\", responseBody); ",
											"pm.globals.set(\"companyaccountasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/companyaccountasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"companyaccountasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/companyaccount",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"companyaccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify companyaccount counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/companyaccountasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"companyaccountasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"companyaccount_addedrowversion\");  ",
											"postman.setGlobalVariable(\"companyaccount_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"companyaccount_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify companyaccount returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/companyaccount/{{companyaccount_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"companyaccount",
										"{{companyaccount_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"companyaccountasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"companyaccountasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"companyaccountasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify companyaccount returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/companyaccountasync/{{companyaccountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"companyaccountasync",
										"{{companyaccountasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify companyaccount updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{companyaccount_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{companyaccount_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/companyaccount/{{companyaccount_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"companyaccount",
										"{{companyaccount_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify companyaccount updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{companyaccountasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{companyaccountasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/companyaccountasync/{{companyaccountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"companyaccountasync",
										"{{companyaccountasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/companyaccount/{{companyaccount_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"companyaccount",
										"{{companyaccount_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/companyaccountasync/{{companyaccountasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"companyaccountasync",
										"{{companyaccountasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT CompanyAccount tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Drone",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"drone_addedid\");  ",
											"postman.setGlobalVariable(\"drone_addedid\", responseBody); ",
											"pm.globals.set(\"drone_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Name\" : \"test drone\",\n    \"Token\": \"random334342\",\n    \"UserId\": 1,\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/drone",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"drone"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"droneasync_addedid\");  ",
											"postman.setGlobalVariable(\"droneasync_addedid\", responseBody); ",
											"pm.globals.set(\"droneasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/drone",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"drone"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify drone counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"drone_addedrowversion\");  ",
											"postman.setGlobalVariable(\"drone_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"drone_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify drone returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/drone/{{drone_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"drone",
										"{{drone_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"droneasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"droneasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"droneasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify drone returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneasync/{{droneasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneasync",
										"{{droneasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify drone updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{drone_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{drone_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/drone/{{drone_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"drone",
										"{{drone_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify drone updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{droneasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{droneasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneasync/{{droneasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneasync",
										"{{droneasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/drone/{{drone_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"drone",
										"{{drone_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneasync/{{droneasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneasync",
										"{{droneasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT Drone tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "DroneCommands",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"dronecommands_addedid\");  ",
											"postman.setGlobalVariable(\"dronecommands_addedid\", responseBody); ",
											"pm.globals.set(\"dronecommands_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronecommands",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronecommands"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"dronecommandsasync_addedid\");  ",
											"postman.setGlobalVariable(\"dronecommandsasync_addedid\", responseBody); ",
											"pm.globals.set(\"dronecommandsasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronecommandsasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronecommandsasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronecommands",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronecommands"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify dronecommands counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronecommandsasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronecommandsasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"dronecommands_addedrowversion\");  ",
											"postman.setGlobalVariable(\"dronecommands_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"dronecommands_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify dronecommands returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronecommands/{{dronecommands_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronecommands",
										"{{dronecommands_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"dronecommandsasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"dronecommandsasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"dronecommandsasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify dronecommands returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronecommandsasync/{{dronecommandsasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronecommandsasync",
										"{{dronecommandsasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify dronecommands updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{dronecommands_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{dronecommands_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronecommands/{{dronecommands_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronecommands",
										"{{dronecommands_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify dronecommands updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{dronecommandsasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{dronecommandsasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronecommandsasync/{{dronecommandsasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronecommandsasync",
										"{{dronecommandsasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronecommands/{{dronecommands_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronecommands",
										"{{dronecommands_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronecommandsasync/{{dronecommandsasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronecommandsasync",
										"{{dronecommandsasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT DroneCommands tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "DroneNetworkSettings",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"dronenetworksettings_addedid\");  ",
											"postman.setGlobalVariable(\"dronenetworksettings_addedid\", responseBody); ",
											"pm.globals.set(\"dronenetworksettings_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronenetworksettings",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronenetworksettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"dronenetworksettingsasync_addedid\");  ",
											"postman.setGlobalVariable(\"dronenetworksettingsasync_addedid\", responseBody); ",
											"pm.globals.set(\"dronenetworksettingsasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronenetworksettingsasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronenetworksettingsasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronenetworksettings",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronenetworksettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify dronenetworksettings counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronenetworksettingsasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronenetworksettingsasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"dronenetworksettings_addedrowversion\");  ",
											"postman.setGlobalVariable(\"dronenetworksettings_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"dronenetworksettings_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify dronenetworksettings returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronenetworksettings/{{dronenetworksettings_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronenetworksettings",
										"{{dronenetworksettings_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"dronenetworksettingsasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"dronenetworksettingsasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"dronenetworksettingsasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify dronenetworksettings returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronenetworksettingsasync/{{dronenetworksettingsasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronenetworksettingsasync",
										"{{dronenetworksettingsasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify dronenetworksettings updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{dronenetworksettings_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{dronenetworksettings_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronenetworksettings/{{dronenetworksettings_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronenetworksettings",
										"{{dronenetworksettings_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify dronenetworksettings updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{dronenetworksettingsasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{dronenetworksettingsasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronenetworksettingsasync/{{dronenetworksettingsasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronenetworksettingsasync",
										"{{dronenetworksettingsasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronenetworksettings/{{dronenetworksettings_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronenetworksettings",
										"{{dronenetworksettings_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/dronenetworksettingsasync/{{dronenetworksettingsasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"dronenetworksettingsasync",
										"{{dronenetworksettingsasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT DroneNetworkSettings tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "DroneOnvifSettings",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"droneonvifsettings_addedid\");  ",
											"postman.setGlobalVariable(\"droneonvifsettings_addedid\", responseBody); ",
											"pm.globals.set(\"droneonvifsettings_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneonvifsettings",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneonvifsettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"droneonvifsettingsasync_addedid\");  ",
											"postman.setGlobalVariable(\"droneonvifsettingsasync_addedid\", responseBody); ",
											"pm.globals.set(\"droneonvifsettingsasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneonvifsettingsasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneonvifsettingsasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneonvifsettings",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneonvifsettings"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify droneonvifsettings counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneonvifsettingsasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneonvifsettingsasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"droneonvifsettings_addedrowversion\");  ",
											"postman.setGlobalVariable(\"droneonvifsettings_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"droneonvifsettings_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify droneonvifsettings returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneonvifsettings/{{droneonvifsettings_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneonvifsettings",
										"{{droneonvifsettings_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"droneonvifsettingsasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"droneonvifsettingsasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"droneonvifsettingsasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify droneonvifsettings returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneonvifsettingsasync/{{droneonvifsettingsasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneonvifsettingsasync",
										"{{droneonvifsettingsasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify droneonvifsettings updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{droneonvifsettings_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{droneonvifsettings_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneonvifsettings/{{droneonvifsettings_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneonvifsettings",
										"{{droneonvifsettings_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify droneonvifsettings updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{droneonvifsettingsasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{droneonvifsettingsasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneonvifsettingsasync/{{droneonvifsettingsasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneonvifsettingsasync",
										"{{droneonvifsettingsasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneonvifsettings/{{droneonvifsettings_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneonvifsettings",
										"{{droneonvifsettings_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/droneonvifsettingsasync/{{droneonvifsettingsasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"droneonvifsettingsasync",
										"{{droneonvifsettingsasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT DroneOnvifSettings tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "GeoArea",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"geoarea_addedid\");  ",
											"postman.setGlobalVariable(\"geoarea_addedid\", responseBody); ",
											"pm.globals.set(\"geoarea_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geoarea",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geoarea"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"geoareaasync_addedid\");  ",
											"postman.setGlobalVariable(\"geoareaasync_addedid\", responseBody); ",
											"pm.globals.set(\"geoareaasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geoareaasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geoareaasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/geoarea",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geoarea"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify geoarea counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/geoareaasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geoareaasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"geoarea_addedrowversion\");  ",
											"postman.setGlobalVariable(\"geoarea_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"geoarea_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify geoarea returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geoarea/{{geoarea_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geoarea",
										"{{geoarea_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"geoareaasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"geoareaasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"geoareaasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify geoarea returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/geoareaasync/{{geoareaasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geoareaasync",
										"{{geoareaasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify geoarea updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{geoarea_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{geoarea_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geoarea/{{geoarea_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geoarea",
										"{{geoarea_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify geoarea updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{geoareaasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{geoareaasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geoareaasync/{{geoareaasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geoareaasync",
										"{{geoareaasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geoarea/{{geoarea_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geoarea",
										"{{geoarea_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geoareaasync/{{geoareaasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geoareaasync",
										"{{geoareaasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT GeoArea tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "GeoPoint",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"geopoint_addedid\");  ",
											"postman.setGlobalVariable(\"geopoint_addedid\", responseBody); ",
											"pm.globals.set(\"geopoint_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geopoint",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geopoint"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"geopointasync_addedid\");  ",
											"postman.setGlobalVariable(\"geopointasync_addedid\", responseBody); ",
											"pm.globals.set(\"geopointasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geopointasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geopointasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/geopoint",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geopoint"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify geopoint counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/geopointasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geopointasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"geopoint_addedrowversion\");  ",
											"postman.setGlobalVariable(\"geopoint_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"geopoint_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify geopoint returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geopoint/{{geopoint_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geopoint",
										"{{geopoint_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"geopointasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"geopointasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"geopointasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify geopoint returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/geopointasync/{{geopointasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geopointasync",
										"{{geopointasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify geopoint updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{geopoint_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{geopoint_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geopoint/{{geopoint_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geopoint",
										"{{geopoint_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify geopoint updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{geopointasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{geopointasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geopointasync/{{geopointasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geopointasync",
										"{{geopointasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geopoint/{{geopoint_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geopoint",
										"{{geopoint_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/geopointasync/{{geopointasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"geopointasync",
										"{{geopointasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT GeoPoint tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Mission",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"mission_addedid\");  ",
											"postman.setGlobalVariable(\"mission_addedid\", responseBody); ",
											"pm.globals.set(\"mission_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/mission",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"mission"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"missionasync_addedid\");  ",
											"postman.setGlobalVariable(\"missionasync_addedid\", responseBody); ",
											"pm.globals.set(\"missionasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/missionasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"missionasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/mission",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"mission"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify mission counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/missionasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"missionasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"mission_addedrowversion\");  ",
											"postman.setGlobalVariable(\"mission_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"mission_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify mission returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/mission/{{mission_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"mission",
										"{{mission_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"missionasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"missionasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"missionasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify mission returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/missionasync/{{missionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"missionasync",
										"{{missionasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify mission updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{mission_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{mission_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/mission/{{mission_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"mission",
										"{{mission_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify mission updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{missionasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{missionasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/missionasync/{{missionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"missionasync",
										"{{missionasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/mission/{{mission_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"mission",
										"{{mission_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/missionasync/{{missionasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"missionasync",
										"{{missionasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT Mission tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PatrolConfig",
					"item": [
						{
							"name": "1.GetToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"//jwt_token defined in Edit collection - Variable",
											"//in this test populated",
											"postman.clearGlobalVariable(\"jwt_token\");  ",
											"//populate token variable",
											"postman.setGlobalVariable(\"jwt_token\", data.token); ",
											"pm.globals.set(\"jwt_token\", data.token);",
											"",
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var data = JSON.parse(responseBody);",
											"//postman.setEnvironmentVariable(\"token\", data.token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"UserName\": \"my@email.com\",\n\"Password\": \"mysecretpassword123\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/token",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "This test must be executed the first to get token value for other tests"
							},
							"response": []
						},
						{
							"name": "Add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"patrolconfig_addedid\");  ",
											"postman.setGlobalVariable(\"patrolconfig_addedid\", responseBody); ",
											"pm.globals.set(\"patrolconfig_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);  //must have this to have time for global addedid to propagate",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/patrolconfig",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"patrolconfig"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add async",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"//",
											"postman.clearGlobalVariable(\"patrolconfigasync_addedid\");  ",
											"postman.setGlobalVariable(\"patrolconfigasync_addedid\", responseBody); ",
											"pm.globals.set(\"patrolconfigasync_addedid\", responseBody);",
											"//",
											"setTimeout(function(){}, 500);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TestText\": \"tt\"\n}"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/patrolconfigasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"patrolconfigasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify account counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/patrolconfig",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"patrolconfig"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAll async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"verify patrolconfig counts\",  () => {",
											"    pm.expect(pm.response.json().length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/patrolconfigasync",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"patrolconfigasync"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"patrolconfig_addedrowversion\");  ",
											"postman.setGlobalVariable(\"patrolconfig_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"patrolconfig_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify patrolconfig returned\",  () => {",
											"   pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/patrolconfig/{{patrolconfig_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"patrolconfig",
										"{{patrolconfig_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//",
											"postman.clearGlobalVariable(\"patrolconfigasync_addedrowversion\");  ",
											"postman.setGlobalVariable(\"patrolconfigasync_addedrowversion\", pm.response.json().rowVersion); ",
											"pm.globals.set(\"patrolconfigasync_addedrowversion\", pm.response.json().rowVersion);",
											"//",
											"pm.test(\"verify patrolconfig returned\",  () => {",
											"  pm.expect(pm.response.json().id).to.be.above(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{apibaseurl}}/api/patrolconfigasync/{{patrolconfigasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"patrolconfigasync",
										"{{patrolconfigasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify patrolconfig updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{patrolconfig_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{patrolconfig_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/patrolconfig/{{patrolconfig_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"patrolconfig",
										"{{patrolconfig_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//updated",
											"pm.test(\"verify patrolconfig updated\",  () => {",
											"   pm.expect(pm.response.json().testText).to.be.equal(\"tt updated\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n        \"id\": {{patrolconfigasync_addedid}},\n        \"testText\": \"tt updated\",\n        \"rowVersion\":\"{{patrolconfigasync_addedrowversion}}\"\n    }"
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/patrolconfigasync/{{patrolconfigasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"patrolconfigasync",
										"{{patrolconfigasync_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/patrolconfig/{{patrolconfig_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"patrolconfig",
										"{{patrolconfig_addedid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteById async",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{apibaseurl}}/api/patrolconfigasync/{{patrolconfigasync_addedid}}",
									"protocol": "http",
									"host": [
										"{{apibaseurl}}"
									],
									"path": [
										"api",
										"patrolconfigasync",
										"{{patrolconfigasync_addedid}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Default JWT PatrolConfig tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "JWT Authentication\n\nNOTE: Set \"UseIndentityServer4\": false in Api's appsettings.json and run API server\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apibaseurl",
			"value": "localhost:44341",
			"type": "string"
		},
		{
			"key": "is4baseurl",
			"value": "localhost:5000",
			"type": "string"
		}
	]
}
