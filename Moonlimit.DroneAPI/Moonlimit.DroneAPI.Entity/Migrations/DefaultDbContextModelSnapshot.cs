// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Moonlimit.DroneAPI.Entity.Context;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Moonlimit.DroneAPI.Entity.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    partial class DefaultDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DroneDroneNetworkSettings", b =>
                {
                    b.Property<int>("DronesId")
                        .HasColumnType("integer")
                        .HasColumnName("drones_id");

                    b.Property<int>("NetworksId")
                        .HasColumnType("integer")
                        .HasColumnName("networks_id");

                    b.HasKey("DronesId", "NetworksId")
                        .HasName("pk_drone_drone_network_settings");

                    b.HasIndex("NetworksId")
                        .HasDatabaseName("ix_drone_drone_network_settings_networks_id");

                    b.ToTable("drone_drone_network_settings");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.CompanyAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsTrial")
                        .HasColumnType("boolean")
                        .HasColumnName("is_trial");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<DateTime>("SetActive")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("set_active");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_company_accounts");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_company_accounts_deleted_at");

                    b.ToTable("company_accounts");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.Drone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AssignedMissionId")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_mission_id");

                    b.Property<int?>("AssignledMissionId")
                        .HasColumnType("integer")
                        .HasColumnName("assignled_mission_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("FlightStatusCode")
                        .HasColumnType("integer")
                        .HasColumnName("flight_status_code");

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_online");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("OnboardCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("onboard_code");

                    b.Property<int>("OnvifSettingsId")
                        .HasColumnType("integer")
                        .HasColumnName("onvif_settings_id");

                    b.Property<string>("Owner")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("owner");

                    b.Property<string>("PlatformCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("platform_code");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer")
                        .HasColumnName("status_code");

                    b.Property<string>("TagNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tag_number");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_drones");

                    b.HasIndex("AssignledMissionId")
                        .HasDatabaseName("ix_drones_assignled_mission_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_drones_deleted_at");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_drones_name")
                        .IncludeProperties(new[] { "TagNumber" });

                    b.HasIndex("OnvifSettingsId")
                        .HasDatabaseName("ix_drones_onvif_settings_id");

                    b.HasIndex("Token")
                        .HasDatabaseName("ix_drones_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_drones_user_id");

                    b.ToTable("drones");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.DroneCom.ObjectDetection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DroneId")
                        .HasColumnType("integer")
                        .HasColumnName("drone_id");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<Point>("Location")
                        .HasColumnType("geography")
                        .HasColumnName("location");

                    b.Property<int>("MissionId")
                        .HasColumnType("integer")
                        .HasColumnName("mission_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("object_id");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("object_type");

                    b.Property<string>("TagNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tag_number");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_object_detections");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_object_detections_deleted_at");

                    b.ToTable("object_detections", "DroneCom");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.DroneCom.PlannedRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DroneId")
                        .HasColumnType("integer")
                        .HasColumnName("drone_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<string>("WaypointsJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("waypoints_json");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_planned_routes");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_planned_routes_deleted_at");

                    b.ToTable("planned_routes", "DroneCom");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.DroneCom.StatusReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Armed")
                        .HasColumnType("boolean")
                        .HasColumnName("armed");

                    b.Property<float>("Battery")
                        .HasColumnType("real")
                        .HasColumnName("battery");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("disabled");

                    b.Property<bool>("DroneActionComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("drone_action_complete");

                    b.Property<int>("DroneActionType")
                        .HasColumnType("integer")
                        .HasColumnName("drone_action_type");

                    b.Property<int>("DroneId")
                        .HasColumnType("integer")
                        .HasColumnName("drone_id");

                    b.Property<int>("DroneStateType")
                        .HasColumnType("integer")
                        .HasColumnName("drone_state_type");

                    b.Property<bool>("Failsafe")
                        .HasColumnType("boolean")
                        .HasColumnName("failsafe");

                    b.Property<int>("GpsQuality")
                        .HasColumnType("integer")
                        .HasColumnName("gps_quality");

                    b.Property<DateTime>("LastReportTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_report_time");

                    b.Property<Point>("Location")
                        .HasColumnType("geography")
                        .HasColumnName("location");

                    b.Property<int>("MissionStateType")
                        .HasColumnType("integer")
                        .HasColumnName("mission_state_type");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_status_reports");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_status_reports_deleted_at");

                    b.ToTable("status_reports", "DroneCom");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.DroneCommands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DroneId")
                        .HasColumnType("integer")
                        .HasColumnName("drone_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_drone_commands");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_drone_commands_deleted_at");

                    b.ToTable("drone_commands");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.DroneNetworkSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DnsHostname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("dns_hostname");

                    b.Property<string>("Encryption")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("encryption");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ip_address");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("NetworkInterface")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("network_interface");

                    b.Property<short>("Order")
                        .HasColumnType("smallint")
                        .HasColumnName("order");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Router")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("router");

                    b.Property<string>("SsId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ss_id");

                    b.Property<string>("SubnetMask")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("subnet_mask");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<bool>("UseDhcp")
                        .HasColumnType("boolean")
                        .HasColumnName("use_dhcp");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_drone_network_settings");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_drone_network_settings_deleted_at");

                    b.ToTable("drone_network_settings");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.DroneOnvifSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<int>("ServicePort")
                        .HasColumnType("integer")
                        .HasColumnName("service_port");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_name");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_drone_onvif_settings");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_drone_onvif_settings_deleted_at");

                    b.ToTable("drone_onvif_settings");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.GeoArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Kind")
                        .HasColumnType("integer")
                        .HasColumnName("kind");

                    b.Property<int?>("MissionId")
                        .HasColumnType("integer")
                        .HasColumnName("mission_id");

                    b.Property<int?>("MissionId1")
                        .HasColumnType("integer")
                        .HasColumnName("mission_id1");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_geo_areas");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_geo_areas_deleted_at");

                    b.HasIndex("MissionId")
                        .HasDatabaseName("ix_geo_areas_mission_id");

                    b.HasIndex("MissionId1")
                        .HasDatabaseName("ix_geo_areas_mission_id1");

                    b.ToTable("geo_areas");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.GeoPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<Point>("Coordinates")
                        .HasColumnType("geography")
                        .HasColumnName("coordinates");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("GeoAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("geo_area_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_geo_points");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_geo_points_deleted_at");

                    b.HasIndex("GeoAreaId")
                        .HasDatabaseName("ix_geo_points_geo_area_id");

                    b.ToTable("geo_points");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<List<Point>>("DroneBases")
                        .HasColumnType("geometry[]")
                        .HasColumnName("drone_bases");

                    b.Property<int>("MissionAreaId")
                        .HasColumnType("integer")
                        .HasColumnName("mission_area_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("PatrolConfigId")
                        .HasColumnType("integer")
                        .HasColumnName("patrol_config_id");

                    b.Property<float>("TargetAltitude")
                        .HasColumnType("real")
                        .HasColumnName("target_altitude");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<int>("TypeCode")
                        .HasColumnType("integer")
                        .HasColumnName("type_code");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_missions");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_missions_deleted_at");

                    b.HasIndex("MissionAreaId")
                        .HasDatabaseName("ix_missions_mission_area_id");

                    b.HasIndex("PatrolConfigId")
                        .HasDatabaseName("ix_missions_patrol_config_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_missions_user_id")
                        .IncludeProperties(new[] { "Name" });

                    b.ToTable("missions");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.PatrolConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<float>("FollowDistance")
                        .HasColumnType("real")
                        .HasColumnName("follow_distance");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<float>("PersonScoreThreshold")
                        .HasColumnType("real")
                        .HasColumnName("person_score_threshold");

                    b.Property<float>("RelativeAltitude")
                        .HasColumnType("real")
                        .HasColumnName("relative_altitude");

                    b.Property<float>("TargetLostTimeouts")
                        .HasColumnType("real")
                        .HasColumnName("target_lost_timeouts");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<float>("VehicleScoreThreshold")
                        .HasColumnType("real")
                        .HasColumnName("vehicle_score_threshold");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_patrol_configs");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_patrol_configs_deleted_at");

                    b.ToTable("patrol_configs");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("company_account_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsAdminRole")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin_role");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<string>("Roles")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("roles");

                    b.Property<string>("TestText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("user_name");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CompanyAccountId")
                        .HasDatabaseName("ix_users_company_account_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_users_deleted_at");

                    b.HasIndex("UserName")
                        .HasDatabaseName("ix_users_user_name")
                        .IncludeProperties(new[] { "Password" });

                    b.ToTable("users");
                });

            modelBuilder.Entity("DroneDroneNetworkSettings", b =>
                {
                    b.HasOne("Moonlimit.DroneAPI.Entity.Drone", null)
                        .WithMany()
                        .HasForeignKey("DronesId")
                        .HasConstraintName("fk_drone_drone_network_settings_drones_drones_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moonlimit.DroneAPI.Entity.DroneNetworkSettings", null)
                        .WithMany()
                        .HasForeignKey("NetworksId")
                        .HasConstraintName("fk_drone_drone_network_settings_drone_network_settings_network")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.Drone", b =>
                {
                    b.HasOne("Moonlimit.DroneAPI.Entity.Mission", "AssignledMission")
                        .WithMany()
                        .HasForeignKey("AssignledMissionId")
                        .HasConstraintName("fk_drones_missions_assignled_mission_id");

                    b.HasOne("Moonlimit.DroneAPI.Entity.DroneOnvifSettings", "OnvifSettings")
                        .WithMany()
                        .HasForeignKey("OnvifSettingsId")
                        .HasConstraintName("fk_drones_drone_onvif_settings_onvif_settings_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignledMission");

                    b.Navigation("OnvifSettings");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.GeoArea", b =>
                {
                    b.HasOne("Moonlimit.DroneAPI.Entity.Mission", null)
                        .WithMany("AvoidAreas")
                        .HasForeignKey("MissionId")
                        .HasConstraintName("fk_geo_areas_missions_mission_id");

                    b.HasOne("Moonlimit.DroneAPI.Entity.Mission", null)
                        .WithMany("InterestAreas")
                        .HasForeignKey("MissionId1")
                        .HasConstraintName("fk_geo_areas_missions_mission_id1");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.GeoPoint", b =>
                {
                    b.HasOne("Moonlimit.DroneAPI.Entity.GeoArea", null)
                        .WithMany("Points")
                        .HasForeignKey("GeoAreaId")
                        .HasConstraintName("fk_geo_points_geo_areas_geo_area_id");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.Mission", b =>
                {
                    b.HasOne("Moonlimit.DroneAPI.Entity.GeoArea", "MissionArea")
                        .WithMany()
                        .HasForeignKey("MissionAreaId")
                        .HasConstraintName("fk_missions_geo_areas_mission_area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moonlimit.DroneAPI.Entity.PatrolConfig", "PatrolConfig")
                        .WithMany()
                        .HasForeignKey("PatrolConfigId")
                        .HasConstraintName("fk_missions_patrol_configs_patrol_config_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MissionArea");

                    b.Navigation("PatrolConfig");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.User", b =>
                {
                    b.HasOne("Moonlimit.DroneAPI.Entity.CompanyAccount", "CompanyAccount")
                        .WithMany("Users")
                        .HasForeignKey("CompanyAccountId")
                        .HasConstraintName("fk_users_company_accounts_company_account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyAccount");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.CompanyAccount", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.GeoArea", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("Moonlimit.DroneAPI.Entity.Mission", b =>
                {
                    b.Navigation("AvoidAreas");

                    b.Navigation("InterestAreas");
                });
#pragma warning restore 612, 618
        }
    }
}
