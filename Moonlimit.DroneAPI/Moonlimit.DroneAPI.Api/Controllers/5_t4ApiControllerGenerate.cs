


// —————————————— 
// <auto-generated> 
//	This code was auto-generated 01/03/2021 11:17:43 
//     	T4 template generates controller's code
//	NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution.
// <auto-generated> 
// —————————————–
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using Moonlimit.DroneAPI.Domain;
using Moonlimit.DroneAPI.Entity.Context;
using Moonlimit.DroneAPI.Domain.Service;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;
using Serilog;
using Moonlimit.DroneAPI.Entity;
using Moonlimit.DroneAPI.Entity.DroneCom;

namespace Moonlimit.DroneAPI.Api.Controllers
{
    /// <summary>
    ///    
    /// A ObjectDetection controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class ObjectDetectionController : ControllerBase
    {
        private readonly ObjectDetectionService<ObjectDetectionViewModel, ObjectDetection> _objectdetectionService;
        public ObjectDetectionController(ObjectDetectionService<ObjectDetectionViewModel, ObjectDetection> objectdetectionService)
        {
            _objectdetectionService = objectdetectionService;
        }
		
	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<ObjectDetectionViewModel> GetAll()
        {
            var items = _objectdetectionService.GetAll();
            return items;
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _objectdetectionService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public IActionResult Create([FromBody] ObjectDetectionViewModel objectdetection)
        {
            if (objectdetection == null)
                return BadRequest();

            var id = _objectdetectionService.Add(objectdetection);
            return Created($"api/ObjectDetection/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] ObjectDetectionViewModel objectdetection)
        {
            if (objectdetection == null || objectdetection.Id != id)
                return BadRequest();

	    var retVal = _objectdetectionService.Update(objectdetection);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(objectdetection);
        }

        //delete 
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _objectdetectionService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A ObjectDetection controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class ObjectDetectionAsyncController : ControllerBase
    {
        private readonly ObjectDetectionServiceAsync<ObjectDetectionViewModel, ObjectDetection> _objectdetectionServiceAsync;
        public ObjectDetectionAsyncController(ObjectDetectionServiceAsync<ObjectDetectionViewModel, ObjectDetection> objectdetectionServiceAsync)
        {
            _objectdetectionServiceAsync = objectdetectionServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _objectdetectionServiceAsync.GetAll();
            return Ok(items);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _objectdetectionServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] ObjectDetectionViewModel objectdetection)
        {
            if (objectdetection == null)
                return BadRequest();

            var id = await _objectdetectionServiceAsync.Add(objectdetection);
            return Created($"api/ObjectDetection/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] ObjectDetectionViewModel objectdetection)
        {
            if (objectdetection == null || objectdetection.Id != id)
                return BadRequest();

	    var retVal = await _objectdetectionServiceAsync.Update(objectdetection);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(objectdetection);
        }


        //delete
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _objectdetectionServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
    /// <summary>
    ///    
    /// A PlannedRoute controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class PlannedRouteController : ControllerBase
    {
        private readonly PlannedRouteService<PlannedRouteViewModel, PlannedRoute> _plannedrouteService;
        public PlannedRouteController(PlannedRouteService<PlannedRouteViewModel, PlannedRoute> plannedrouteService)
        {
            _plannedrouteService = plannedrouteService;
        }
		
	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<PlannedRouteViewModel> GetAll()
        {
            var items = _plannedrouteService.GetAll();
            return items;
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _plannedrouteService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public IActionResult Create([FromBody] PlannedRouteViewModel plannedroute)
        {
            if (plannedroute == null)
                return BadRequest();

            var id = _plannedrouteService.Add(plannedroute);
            return Created($"api/PlannedRoute/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] PlannedRouteViewModel plannedroute)
        {
            if (plannedroute == null || plannedroute.Id != id)
                return BadRequest();

	    var retVal = _plannedrouteService.Update(plannedroute);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(plannedroute);
        }

        //delete 
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _plannedrouteService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A PlannedRoute controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class PlannedRouteAsyncController : ControllerBase
    {
        private readonly PlannedRouteServiceAsync<PlannedRouteViewModel, PlannedRoute> _plannedrouteServiceAsync;
        public PlannedRouteAsyncController(PlannedRouteServiceAsync<PlannedRouteViewModel, PlannedRoute> plannedrouteServiceAsync)
        {
            _plannedrouteServiceAsync = plannedrouteServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _plannedrouteServiceAsync.GetAll();
            return Ok(items);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _plannedrouteServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] PlannedRouteViewModel plannedroute)
        {
            if (plannedroute == null)
                return BadRequest();

            var id = await _plannedrouteServiceAsync.Add(plannedroute);
            return Created($"api/PlannedRoute/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] PlannedRouteViewModel plannedroute)
        {
            if (plannedroute == null || plannedroute.Id != id)
                return BadRequest();

	    var retVal = await _plannedrouteServiceAsync.Update(plannedroute);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(plannedroute);
        }


        //delete
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _plannedrouteServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
    /// <summary>
    ///    
    /// A StatusReport controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class StatusReportController : ControllerBase
    {
        private readonly StatusReportService<StatusReportViewModel, StatusReport> _statusreportService;
        public StatusReportController(StatusReportService<StatusReportViewModel, StatusReport> statusreportService)
        {
            _statusreportService = statusreportService;
        }
		
	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<StatusReportViewModel> GetAll()
        {
            var items = _statusreportService.GetAll();
            return items;
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _statusreportService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public IActionResult Create([FromBody] StatusReportViewModel statusreport)
        {
            if (statusreport == null)
                return BadRequest();

            var id = _statusreportService.Add(statusreport);
            return Created($"api/StatusReport/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] StatusReportViewModel statusreport)
        {
            if (statusreport == null || statusreport.Id != id)
                return BadRequest();

	    var retVal = _statusreportService.Update(statusreport);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(statusreport);
        }

        //delete 
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _statusreportService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A StatusReport controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class StatusReportAsyncController : ControllerBase
    {
        private readonly StatusReportServiceAsync<StatusReportViewModel, StatusReport> _statusreportServiceAsync;
        public StatusReportAsyncController(StatusReportServiceAsync<StatusReportViewModel, StatusReport> statusreportServiceAsync)
        {
            _statusreportServiceAsync = statusreportServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _statusreportServiceAsync.GetAll();
            return Ok(items);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _statusreportServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] StatusReportViewModel statusreport)
        {
            if (statusreport == null)
                return BadRequest();

            var id = await _statusreportServiceAsync.Add(statusreport);
            return Created($"api/StatusReport/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] StatusReportViewModel statusreport)
        {
            if (statusreport == null || statusreport.Id != id)
                return BadRequest();

	    var retVal = await _statusreportServiceAsync.Update(statusreport);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(statusreport);
        }


        //delete
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _statusreportServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
    /// <summary>
    ///    
    /// A CompanyAccount controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class CompanyAccountController : ControllerBase
    {
        private readonly CompanyAccountService<CompanyAccountViewModel, CompanyAccount> _companyaccountService;
        public CompanyAccountController(CompanyAccountService<CompanyAccountViewModel, CompanyAccount> companyaccountService)
        {
            _companyaccountService = companyaccountService;
        }
		
	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<CompanyAccountViewModel> GetAll()
        {
            var items = _companyaccountService.GetAll();
            return items;
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _companyaccountService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public IActionResult Create([FromBody] CompanyAccountViewModel companyaccount)
        {
            if (companyaccount == null)
                return BadRequest();

            var id = _companyaccountService.Add(companyaccount);
            return Created($"api/CompanyAccount/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] CompanyAccountViewModel companyaccount)
        {
            if (companyaccount == null || companyaccount.Id != id)
                return BadRequest();

	    var retVal = _companyaccountService.Update(companyaccount);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(companyaccount);
        }

        //delete 
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _companyaccountService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A CompanyAccount controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class CompanyAccountAsyncController : ControllerBase
    {
        private readonly CompanyAccountServiceAsync<CompanyAccountViewModel, CompanyAccount> _companyaccountServiceAsync;
        public CompanyAccountAsyncController(CompanyAccountServiceAsync<CompanyAccountViewModel, CompanyAccount> companyaccountServiceAsync)
        {
            _companyaccountServiceAsync = companyaccountServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _companyaccountServiceAsync.GetAll();
            return Ok(items);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _companyaccountServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] CompanyAccountViewModel companyaccount)
        {
            if (companyaccount == null)
                return BadRequest();

            var id = await _companyaccountServiceAsync.Add(companyaccount);
            return Created($"api/CompanyAccount/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] CompanyAccountViewModel companyaccount)
        {
            if (companyaccount == null || companyaccount.Id != id)
                return BadRequest();

	    var retVal = await _companyaccountServiceAsync.Update(companyaccount);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(companyaccount);
        }


        //delete
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _companyaccountServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
    /// <summary>
    ///    
    /// A DroneCommands controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class DroneCommandsController : ControllerBase
    {
        private readonly DroneCommandsService<DroneCommandsViewModel, DroneCommands> _dronecommandsService;
        public DroneCommandsController(DroneCommandsService<DroneCommandsViewModel, DroneCommands> dronecommandsService)
        {
            _dronecommandsService = dronecommandsService;
        }
		
	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<DroneCommandsViewModel> GetAll()
        {
            var items = _dronecommandsService.GetAll();
            return items;
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _dronecommandsService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public IActionResult Create([FromBody] DroneCommandsViewModel dronecommands)
        {
            if (dronecommands == null)
                return BadRequest();

            var id = _dronecommandsService.Add(dronecommands);
            return Created($"api/DroneCommands/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] DroneCommandsViewModel dronecommands)
        {
            if (dronecommands == null || dronecommands.Id != id)
                return BadRequest();

	    var retVal = _dronecommandsService.Update(dronecommands);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(dronecommands);
        }

        //delete 
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _dronecommandsService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A DroneCommands controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class DroneCommandsAsyncController : ControllerBase
    {
        private readonly DroneCommandsServiceAsync<DroneCommandsViewModel, DroneCommands> _dronecommandsServiceAsync;
        public DroneCommandsAsyncController(DroneCommandsServiceAsync<DroneCommandsViewModel, DroneCommands> dronecommandsServiceAsync)
        {
            _dronecommandsServiceAsync = dronecommandsServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _dronecommandsServiceAsync.GetAll();
            return Ok(items);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _dronecommandsServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] DroneCommandsViewModel dronecommands)
        {
            if (dronecommands == null)
                return BadRequest();

            var id = await _dronecommandsServiceAsync.Add(dronecommands);
            return Created($"api/DroneCommands/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] DroneCommandsViewModel dronecommands)
        {
            if (dronecommands == null || dronecommands.Id != id)
                return BadRequest();

	    var retVal = await _dronecommandsServiceAsync.Update(dronecommands);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(dronecommands);
        }


        //delete
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _dronecommandsServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
    /// <summary>
    ///    
    /// A DroneOnvifSettings controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class DroneOnvifSettingsController : ControllerBase
    {
        private readonly DroneOnvifSettingsService<DroneOnvifSettingsViewModel, DroneOnvifSettings> _droneonvifsettingsService;
        public DroneOnvifSettingsController(DroneOnvifSettingsService<DroneOnvifSettingsViewModel, DroneOnvifSettings> droneonvifsettingsService)
        {
            _droneonvifsettingsService = droneonvifsettingsService;
        }
		
	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<DroneOnvifSettingsViewModel> GetAll()
        {
            var items = _droneonvifsettingsService.GetAll();
            return items;
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _droneonvifsettingsService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public IActionResult Create([FromBody] DroneOnvifSettingsViewModel droneonvifsettings)
        {
            if (droneonvifsettings == null)
                return BadRequest();

            var id = _droneonvifsettingsService.Add(droneonvifsettings);
            return Created($"api/DroneOnvifSettings/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] DroneOnvifSettingsViewModel droneonvifsettings)
        {
            if (droneonvifsettings == null || droneonvifsettings.Id != id)
                return BadRequest();

	    var retVal = _droneonvifsettingsService.Update(droneonvifsettings);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(droneonvifsettings);
        }

        //delete 
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _droneonvifsettingsService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A DroneOnvifSettings controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class DroneOnvifSettingsAsyncController : ControllerBase
    {
        private readonly DroneOnvifSettingsServiceAsync<DroneOnvifSettingsViewModel, DroneOnvifSettings> _droneonvifsettingsServiceAsync;
        public DroneOnvifSettingsAsyncController(DroneOnvifSettingsServiceAsync<DroneOnvifSettingsViewModel, DroneOnvifSettings> droneonvifsettingsServiceAsync)
        {
            _droneonvifsettingsServiceAsync = droneonvifsettingsServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _droneonvifsettingsServiceAsync.GetAll();
            return Ok(items);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _droneonvifsettingsServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] DroneOnvifSettingsViewModel droneonvifsettings)
        {
            if (droneonvifsettings == null)
                return BadRequest();

            var id = await _droneonvifsettingsServiceAsync.Add(droneonvifsettings);
            return Created($"api/DroneOnvifSettings/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] DroneOnvifSettingsViewModel droneonvifsettings)
        {
            if (droneonvifsettings == null || droneonvifsettings.Id != id)
                return BadRequest();

	    var retVal = await _droneonvifsettingsServiceAsync.Update(droneonvifsettings);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(droneonvifsettings);
        }


        //delete
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _droneonvifsettingsServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
    /// <summary>
    ///    
    /// A GeoArea controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class GeoAreaController : ControllerBase
    {
        private readonly GeoAreaService<GeoAreaViewModel, GeoArea> _geoareaService;
        public GeoAreaController(GeoAreaService<GeoAreaViewModel, GeoArea> geoareaService)
        {
            _geoareaService = geoareaService;
        }
		
	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<GeoAreaViewModel> GetAll()
        {
            var items = _geoareaService.GetAll();
            return items;
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _geoareaService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public IActionResult Create([FromBody] GeoAreaViewModel geoarea)
        {
            if (geoarea == null)
                return BadRequest();

            var id = _geoareaService.Add(geoarea);
            return Created($"api/GeoArea/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] GeoAreaViewModel geoarea)
        {
            if (geoarea == null || geoarea.Id != id)
                return BadRequest();

	    var retVal = _geoareaService.Update(geoarea);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(geoarea);
        }

        //delete 
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _geoareaService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A GeoArea controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class GeoAreaAsyncController : ControllerBase
    {
        private readonly GeoAreaServiceAsync<GeoAreaViewModel, GeoArea> _geoareaServiceAsync;
        public GeoAreaAsyncController(GeoAreaServiceAsync<GeoAreaViewModel, GeoArea> geoareaServiceAsync)
        {
            _geoareaServiceAsync = geoareaServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _geoareaServiceAsync.GetAll();
            return Ok(items);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _geoareaServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] GeoAreaViewModel geoarea)
        {
            if (geoarea == null)
                return BadRequest();

            var id = await _geoareaServiceAsync.Add(geoarea);
            return Created($"api/GeoArea/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] GeoAreaViewModel geoarea)
        {
            if (geoarea == null || geoarea.Id != id)
                return BadRequest();

	    var retVal = await _geoareaServiceAsync.Update(geoarea);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(geoarea);
        }


        //delete
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _geoareaServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
    /// <summary>
    ///    
    /// A GeoPoint controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class GeoPointController : ControllerBase
    {
        private readonly GeoPointService<GeoPointViewModel, GeoPoint> _geopointService;
        public GeoPointController(GeoPointService<GeoPointViewModel, GeoPoint> geopointService)
        {
            _geopointService = geopointService;
        }
		
	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<GeoPointViewModel> GetAll()
        {
            var items = _geopointService.GetAll();
            return items;
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _geopointService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public IActionResult Create([FromBody] GeoPointViewModel geopoint)
        {
            if (geopoint == null)
                return BadRequest();

            var id = _geopointService.Add(geopoint);
            return Created($"api/GeoPoint/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] GeoPointViewModel geopoint)
        {
            if (geopoint == null || geopoint.Id != id)
                return BadRequest();

	    var retVal = _geopointService.Update(geopoint);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(geopoint);
        }

        //delete 
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _geopointService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A GeoPoint controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class GeoPointAsyncController : ControllerBase
    {
        private readonly GeoPointServiceAsync<GeoPointViewModel, GeoPoint> _geopointServiceAsync;
        public GeoPointAsyncController(GeoPointServiceAsync<GeoPointViewModel, GeoPoint> geopointServiceAsync)
        {
            _geopointServiceAsync = geopointServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _geopointServiceAsync.GetAll();
            return Ok(items);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _geopointServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] GeoPointViewModel geopoint)
        {
            if (geopoint == null)
                return BadRequest();

            var id = await _geopointServiceAsync.Add(geopoint);
            return Created($"api/GeoPoint/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] GeoPointViewModel geopoint)
        {
            if (geopoint == null || geopoint.Id != id)
                return BadRequest();

	    var retVal = await _geopointServiceAsync.Update(geopoint);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(geopoint);
        }


        //delete
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _geopointServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
    /// <summary>
    ///    
    /// A PatrolConfig controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class PatrolConfigController : ControllerBase
    {
        private readonly PatrolConfigService<PatrolConfigViewModel, PatrolConfig> _patrolconfigService;
        public PatrolConfigController(PatrolConfigService<PatrolConfigViewModel, PatrolConfig> patrolconfigService)
        {
            _patrolconfigService = patrolconfigService;
        }
		
	//get all
        [Authorize]
        [HttpGet]
        public IEnumerable<PatrolConfigViewModel> GetAll()
        {
            var items = _patrolconfigService.GetAll();
            return items;
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public IActionResult GetById(int id)
        {
            var item = _patrolconfigService.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public IActionResult Create([FromBody] PatrolConfigViewModel patrolconfig)
        {
            if (patrolconfig == null)
                return BadRequest();

            var id = _patrolconfigService.Add(patrolconfig);
            return Created($"api/PatrolConfig/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public IActionResult Update(int id, [FromBody] PatrolConfigViewModel patrolconfig)
        {
            if (patrolconfig == null || patrolconfig.Id != id)
                return BadRequest();

	    var retVal = _patrolconfigService.Update(patrolconfig);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(patrolconfig);
        }

        //delete 
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
	    var retVal = _patrolconfigService.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }

    }

    /// <summary>
    ///    
    /// A PatrolConfig controller
    ///
    /// MANUAL UPDATES REQUIRED!
    /// Update API version and uncomment route version declaration if required 
    ///       
    /// </summary>
    [ApiVersion("1.0")]
    [Route("api/[controller]")]
    //[Route("api/v{version:apiVersion}/[controller]")]
    [ApiController]
    public class PatrolConfigAsyncController : ControllerBase
    {
        private readonly PatrolConfigServiceAsync<PatrolConfigViewModel, PatrolConfig> _patrolconfigServiceAsync;
        public PatrolConfigAsyncController(PatrolConfigServiceAsync<PatrolConfigViewModel, PatrolConfig> patrolconfigServiceAsync)
        {
            _patrolconfigServiceAsync = patrolconfigServiceAsync;
        }


        //get all
        [Authorize]
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var items = await _patrolconfigServiceAsync.GetAll();
            return Ok(items);
        }

        //get one
        [Authorize]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var item = await _patrolconfigServiceAsync.GetOne(id);
            if (item == null)
            {
                Log.Error("GetById({ ID}) NOT FOUND", id);
                return NotFound();
            }

            return Ok(item);
        }

        //add
        [Authorize(Roles = "Administrator")]
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] PatrolConfigViewModel patrolconfig)
        {
            if (patrolconfig == null)
                return BadRequest();

            var id = await _patrolconfigServiceAsync.Add(patrolconfig);
            return Created($"api/PatrolConfig/{id}", id);  //HTTP201 Resource created
        }

        //update
        [Authorize(Roles = "Administrator")]
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(int id, [FromBody] PatrolConfigViewModel patrolconfig)
        {
            if (patrolconfig == null || patrolconfig.Id != id)
                return BadRequest();

	    var retVal = await _patrolconfigServiceAsync.Update(patrolconfig);
            if (retVal == 0)
				return StatusCode(304);  //Not Modified
            else if (retVal == - 1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //412 Precondition Failed  - concurrency
            else
                return Accepted(patrolconfig);
        }


        //delete
        [Authorize(Roles = "Administrator")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
	    var retVal = await _patrolconfigServiceAsync.Remove(id);
	    if (retVal == 0)
                return NotFound();  //Not Found 404
            else if (retVal == -1)
                return StatusCode(412, "DbUpdateConcurrencyException");  //Precondition Failed  - concurrency
            else
                return NoContent();   	     //No Content 204
        }
    }
}